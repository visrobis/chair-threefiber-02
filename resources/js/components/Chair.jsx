/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/chair.gltf 
*/

import React from "react";
import { useGLTF, useTexture } from "@react-three/drei";
import * as THREE from "three";
import { useCustomization } from "../contexts/Customization";

export function Chair(props) {
    const { nodes, materials } = useGLTF("./models/chair.gltf");
    const { material, legs, chairColor, cushionColor } = useCustomization();

    const leatherTextureProps = useTexture({
        // map: "./textures/leather/Leather_008_Base Color.jpg",
        normalMap: "./textures/leather/Leather_008_Normal.jpg",
        roughnessMap: "./textures/leather/Leather_008_Roughness.jpg",
        aoMap: "./textures/leather/Leather_008_Ambient Occlusion.jpg",
    });

    // leatherTextureProps.map.repeat.set(1, 1);
    leatherTextureProps.normalMap.repeat.set(1, 1);
    leatherTextureProps.roughnessMap.repeat.set(1, 1);
    leatherTextureProps.aoMap.repeat.set(1, 1);

    // leatherTextureProps.map.wrapS = leatherTextureProps.map.wrapT =
    //     THREE.RepeatWrapping;
    // leatherTextureProps.normalMap.wrapS = leatherTextureProps.map.wrapT =
    //     THREE.RepeatWrapping;
    // leatherTextureProps.roughnessMap.wrapS = leatherTextureProps.map.wrapT =
    //     THREE.RepeatWrapping;
    // leatherTextureProps.aoMap.wrapS = leatherTextureProps.map.wrapT =
    //     THREE.RepeatWrapping;

    const fabricTextureProps = useTexture({
        // map: "./textures/fabric/Fabric_knitted_006_basecolor.jpg",
        normalMap: "./textures/fabric/Fabric_knitted_006_normal.jpg",
        roughnessMap: "./textures/fabric/Fabric_knitted_006_roughness.jpg",
        aoMap: "./textures/fabric/Fabric_knitted_006_ambientOcclusion.jpg",
    });

    // fabricTextureProps.map.repeat.set(1, 1);
    // fabricTextureProps.normalMap.repeat.set(1, 1);
    // fabricTextureProps.roughnessMap.repeat.set(1, 1);
    // fabricTextureProps.aoMap.repeat.set(1, 1);

    // // fabricTextureProps.map.wrapS = leatherTextureProps.map.wrapT =
    // //     THREE.RepeatWrapping;
    // fabricTextureProps.normalMap.wrapS = leatherTextureProps.map.wrapT =
    //     THREE.RepeatWrapping;
    // fabricTextureProps.roughnessMap.wrapS = leatherTextureProps.map.wrapT =
    //     THREE.RepeatWrapping;
    // fabricTextureProps.aoMap.wrapS = leatherTextureProps.map.wrapT =
    //     THREE.RepeatWrapping;

    return (
        <group {...props} dispose={null}>
            <mesh geometry={nodes.Chair.geometry}>
                <meshStandardMaterial
                    {...(material === "fabric"
                        ? fabricTextureProps
                        : leatherTextureProps)}
                    color={chairColor.color}
                />
            </mesh>
            <mesh
                geometry={nodes.Cushion.geometry}
                position={[0, 0.064, 0.045]}
            >
                <meshStandardMaterial
                    color={cushionColor.color}
                    {...fabricTextureProps}
                />
            </mesh>
            {legs === "classic" ? (
                <mesh
                    geometry={nodes.Legs2.geometry}
                    material={materials.Legs}
                />
            ) : (
                <mesh
                    geometry={nodes.Legs1.geometry}
                    material={materials.Legs}
                />
            )}
        </group>
    );
}

useGLTF.preload("./models/chair.gltf");
